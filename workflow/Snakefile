import os

# ‚úÖ Get the absolute path of the workflow directory
WORKFLOW_DIR = os.path.abspath(os.path.dirname(__file__))

# ‚úÖ Get the absolute path of the GitHub repository (codebase)
CODEBASE_DIR = os.path.abspath(os.path.join(WORKFLOW_DIR, ".."))

# ‚úÖ Get the correct path to `setup_project.py` inside your GitHub repo
SETUP_SCRIPT = os.path.join(CODEBASE_DIR, "scripts", "setup_project.py")

# üîπ Ask the user for the external project folder where data will be stored
PROJECT_FOLDER = input("üìÇ Enter the full path of your project folder: ").strip()

# ‚úÖ Define the correct path for `config.json` inside the separate project folder
CONFIG_FILE = os.path.join(PROJECT_FOLDER, "config.json")

# üîç Print debug information
print(f"üü¢ DEBUG INFO:")
print(f"  - Workflow directory: {WORKFLOW_DIR}")
print(f"  - Codebase directory: {CODEBASE_DIR}")
print(f"  - Setup script path: {SETUP_SCRIPT}")
print(f"  - Project folder: {PROJECT_FOLDER}")
print(f"  - Config file path: {CONFIG_FILE}")

# ‚úÖ Snakemake Rule: Ensure `config.json` is created inside the external project folder
rule setup_project:
    output: CONFIG_FILE
    shell:
        "python {SETUP_SCRIPT} --project_folder {PROJECT_FOLDER}"  # ‚úÖ Runs in the correct directory

rule all:
    input:
        CONFIG_FILE  # ‚úÖ Ensures project folder is set up before running any other rules