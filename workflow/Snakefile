import os
import json

# ‚úÖ Ensure Snakemake starts in the correct project directory
WORKFLOW_DIR = os.path.abspath(os.path.dirname(__file__))
CODEBASE_DIR = os.path.abspath(os.path.join(WORKFLOW_DIR, ".."))

# ‚úÖ Fix the path to `setup_project.py`
SETUP_SCRIPT = os.path.join(CODEBASE_DIR, "scripts", "setup_project.py")

# üîπ Ask the user for the external project folder where data will be stored
PROJECT_FOLDER = input("üìÇ Enter the full path of your project folder (e.g., /Users/yourname/my_project): ").strip()

# ‚úÖ Ensure the project folder exists and prevent deletion
if not os.path.exists(PROJECT_FOLDER):
    os.makedirs(PROJECT_FOLDER, exist_ok=True)

# ‚úÖ Define the correct path for `config.json` inside the separate project folder
CONFIG_FILE = os.path.join(PROJECT_FOLDER, "config.json")

# üîç Print debug information
print(f"üü¢ DEBUG INFO:")
print(f"  - Workflow directory: {WORKFLOW_DIR}")
print(f"  - Codebase (GitHub Repo) directory: {CODEBASE_DIR}")
print(f"  - Setup script path: {SETUP_SCRIPT}")
print(f"  - Project folder for data: {PROJECT_FOLDER}")
print(f"  - Config file path: {CONFIG_FILE}")

# ‚úÖ Snakemake Rule: Ensure `config.json` is created inside the external project folder
rule setup_project:
    output: CONFIG_FILE
    shell:
        "cd {CODEBASE_DIR} && python scripts/setup_project.py --project_folder {PROJECT_FOLDER}"  # ‚úÖ Ensures script runs inside the correct directory

rule all:
    input:
        CONFIG_FILE,
        os.path.join(PROJECT_FOLDER, "results/processed_images.txt")  # ‚úÖ Ensures project folder is not deleted

include: "rules/preprocess.smk"
include: "rules/postprocess.smk"